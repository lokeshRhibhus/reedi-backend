name: Deployment

on: [push]

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    env:
      AZURE_WEBAPP_NAME: dev-reedi
      AZURE_WEBAPP_PACKAGE_PATH: '.'
      PYTHON_VERSION: '3.10'
      STORAGE_FILE_NAME: ojd_daps_skills_data.zip
      CONTAINER_NAME: packages
      PATH_TO_PACKAGE_FILE: /venv/lib/python3.10/site-packages/
    steps:
      # Clone repository
      - name: Checkout code
        uses: actions/checkout@v2
      # Setup python and dependencies
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{env.PYTHON_VERSION}}


      - name: Create and start virtual environment
        run: |
          python -m venv venv
          source venv/bin/activate

      - name: Set up dependency caching for faster installs
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pre-commit

      - name: Write credentials.json file
        run: |
          touch credentials.json
          echo '${{secrets.BUCKET_CREDENTIALS}}' > credentials.json
          cat credentials.json
          export GOOGLE_APPLICATION_CREDENTIALS="$(pwd)/credentials.json"
        #
        env:
          CREDENTIALS: ${{secrets.BUCKET_CREDENTIALS}}
          pythonLocation: /opt/hostedtoolcache/Python/3.10.14/x64
          LD_LIBRARY_PATH: /opt/hostedtoolcache/Python/3.10.14/x64/lib
          GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}

      - name: Set GOOGLE_APPLICATION_CREDENTIALS
        run: echo "GOOGLE_APPLICATION_CREDENTIALS=$GITHUB_WORKSPACE/credentials.json" >> $GITHUB_ENV

      - name: Set up DVC remote
        run: dvc remote modify myremote credentialpath $GITHUB_WORKSPACE/credentials.json

      - name: Read PWD
        run: pwd

      - name: Create modules directory
        run: mkdir $(pwd)/data/modules

      - name: Check config file
        run: cat $(pwd)/.dvc/config
      # Pull data
      - name: Verify DVC remote
        run: |
          dvc remote list
          # dvc remote status

      - name: List DVC remote storage files
        run: |
          dvc remote list
          # dvc ls myremote -R
      - name: Ensure DVC cache directory exists
        run: |
          mkdir -p $(pwd)/.dvc/cache/files/md5/
          mkdir -p $(pwd)/data/processed/jobs_clean/

      - name: Pull data
        run: dvc pull -v
        continue-on-error: true

      - name: Check modules directory
        run: ls $(pwd)/data/ && echo "modules :" && ls $(pwd)/data/modules

      - name: Read data
        if: ${{ failure() }} || ${{ success() }}
        run: ls -la ./data/modules

      # Create the SSH private key file
      - name: Make key file
        run: |
          touch vapi-vm2-reedi-backend
          chmod 600 vapi-vm2-reedi-backend
          echo "${{ secrets.VM_KEY }}" > vapi-vm2-reedi-backend
          
      # Create the .ssh directory
      - name: Create .ssh directory
        run: |
          mkdir -p ~/.ssh
          
      # List files for debugging
      - name: List files
        run: ls -la

      # Add the server to known hosts
      - name: Add server to known hosts
        run: |
          ssh-keyscan -H 20.193.149.51 >> ~/.ssh/known_hosts
      # ZIP files
      - name: Set up Azure CLI
        uses: azure/cli@v2
        with:
          azcliversion: latest
          inlineScript: |
            az --version

      - name: Make temp dir
        run: |
          mkdir -p $HOME/.azure-config
          export AZURE_CONFIG_DIR=$HOME/.azure-config
          echo "AZURE_CONFIG_DIR=$HOME/.azure-config" >> $GITHUB_ENV

      - name: Login to Azure
        run: |
          az login --service-principal \
            --username ${{ secrets.AZURE_CLIENT_ID }} \
            --password ${{ secrets.AZURE_CLIENT_SECRET }} \
            --tenant ${{ secrets.AZURE_TENANT_ID }}

      - name: Download Blob from Azure Storage
        run: |
          az storage blob download \
            --account-name ${{ secrets.AZURE_STORAGE_ACCOUNT }} \
            --container-name ${{env.CONTAINER_NAME}} \
            --name ${{env.STORAGE_FILE_NAME}} \
            --file $(pwd)/${{env.STORAGE_FILE_NAME}} \
            --auth-mode key \
            --account-key ${{ secrets.AZURE_STORAGE_KEY }}

      - name: Verify Download
        run: ls -l $(pwd)

      - name: install unzip
        run: |
          sudo apt install unzip -y

      - name: Move file and unzip
        run: |
          if [! -f "$(pwd)/${{env.STORAGE_FILE_NAME}} $(pwd)/${{env.PATH_TO_MOVE_PACKAGE_FILE}}"]; then
            mv $(pwd)/${{env.STORAGE_FILE_NAME}} $(pwd)/${{env.PATH_TO_MOVE_PACKAGE_FILE}}
          else
            echo "File already exists, skipping move step."
          fi
          unzip $(pwd)/${{env.PATH_TO_MOVE_PACKAGE_FILE}}/${{env.STORAGE_FILE_NAME}}

      
      # send files
      - name: SCP to files
        run: scp -i vapi-vm2-reedi-backend -o StrictHostKeyChecking=no -r ./* abodoo@20.193.149.51:/home/abodoo/api/
      # Establish connection and create directory
      - name: Establish connection
        run: |
          ssh -i vapi-vm2-reedi-backend -o StrictHostKeyChecking=no abodoo@20.193.149.51 << 'EOF'
          echo pulled
          EOF

     
